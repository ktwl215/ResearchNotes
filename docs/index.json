[{"content":" はじめに 前回でHugoを使う準備は整いました。\n今回は、実際にサイトを作ってみましょう。\n サイトの作成 Hugoの作業用フォルダに、サイト用のフォルダ「Sites」を作ります。\nHugo | -hugo_(ver.)_Windows-64bit | | -bin | | | -hugo.exe | | | -LICENSE | | | -README.md | | | -Sites Hugoの操作は「コマンドプロンプト」から行います。\nまずはcdでカレントディレクトリを「Sites」に変更します。cd C:/Hugo/Sites\nサイトを作成するときはhugo new site サイト名を実行します。\nすると現在のディレクトリに「サイト名」のフォルダが生成されます。\nサイト名は何でもいいですが、ここでは「MySite」とします。\nでは実行してみます。hugo new site MySite -f yml\n急に-f ymlって変なのがくっついてる！と思うでしょうが焦らないで下さい。\nこれはサイト生成のオプションを付け足しただけです。\n意味は「サイトの設定を記述するconfigファイルをYML形式にしてね」です。\nテーマによってconfigファイルの形式が違います。これから例に説明する「PaperMod」という テーマがYML形式だったのでこのオプションを付けています。hugo new site\n後で詳しく説明するので、今はなんとなく読み飛ばして下さい。\nSites | -MySite | | -archetypes | | -content | | -data | | -layouts | | -static | | -themes | | -config.yml たったこれだけでサイトが出来ました。\n「MySite」以下に生成されたファイル群の概要は次の通りです。Directory Structure\narchetypes hugo newコマンドでコンテンツを作成するときのアーキタイプを格納するディレクトリ\ncontent コンテンツを格納するディレクトリ。ここで記事を作る。\ndata 色々なデータを保存するディレクトリ。\nlayouts HTML生成時のレイアウト設定などのテンプレートを格納するディレクトリ。\nstatic 画像、CSS、JavaScriptなどのすべての静的コンテンツを格納するディレクトリ。\nthemes テーマを格納するディレクトリ。\nconfig.yml サイトの様々な設定を記述するファイル。形式はtomlかymlかjson\nあとは基本的にはcontent以下でMarkdownを書くだけで記事を作っていけます。\n他のディレクトリはサイトを細かくカスタマイズしていく際に触ってみてください。\nひとまずこれでサイトの作成が出来ました！\n テーマの適用 次はテーマを選びましょう。Hugoには様々なテーマが公開されています。\nHugo Themesを訪れて、好みのテーマを選びましょう！\n魅力的なテーマが多くてなかなか決められませんね。笑\nここで１つテーマ選びで大切なことがあります。\nHugoのテーマで決まるのはデザインだけではないということです。\nサイトの機能面もテーマによって決まります。正確には、初めから提供されている機能がテーマによって違います。例えば、最終更新日の表示、カテゴリー別表示、検索機能などです。\nHugoには、最終更新日の設定や、タグ・カテゴリーといった機能自体は存在します。\nしかし、それをサイトに反映しようと思うと自分で実装しなくてはなりません。\nこれは、設定ボタンON！OFF！みたいに簡単にはいきません。\nHugoに慣れてきたら自分でカスタマイズして追加も出来ますが、初心者にはハードルが高く時間もかかるでしょう。なので、ある程度は機能面も考慮してテーマを選ぶのが良いでしょう。\n良さそうなテーマを見つけたら「demo」や「example」と書かれた場所からデモサイトを見ることが出来ます。特徴を文字で説明されても何のことかよく分からないでしょう。実際にデモサイトを触ってみることをおすすめします。\nここでは「PaperMod（デモサイト）」というテーマを例に説明していきます。\nこのサイトもPaperModを使用しています。\nテーマのダウンロード テーマを決めたらありがたく使わせて頂きます。ダウンロードしましょう。\nDownloadをクリックし、GitHubに移動したら、codeからzipをダウンロードします。\n中身を展開し、MySite/themes 以下に配置しましょう。この時、フォルダ名を\n「hugo-PaperMod_master」から「hugo-PaperMod」に変更してください。\nMySite | -archetypes | -content | -data | -layouts | -static | -themes | | -hugo-PaperMod | -config.yml configファイルの設定 ダウンロードが済んだら、サイトにテーマ適用の設定をします。configファイルをテキストエディタで開きます。\n1 2 3  baseURL: http://example.org/ languageCode: en-us title: My New Hugo Site   ここにthemeの記述を追加します。\n1 2 3 4  baseURL: http://example.org/ languageCode: en-us title: My New Hugo Site theme: hugo-PaperMod   これでテーマの適用が完了しました。簡単！\n（補足）configファイルの形式 Hugoではサイト設定ファイルであるconfigの形式を、「toml」か「yml」か「json」で記述することになっています。デフォルトでは「toml」です。Configure Hugo\n何が違うかというと、文法が違うだけです。\nこれからテーマとconfigをカスタマイズするにあたって、テーマが公開しているデモサイトのconfigファイルを参考にしたりコピーしたりします。この時、文法の違いを気にしたくないですし、それが原因のエラーも起こしたくありません。\nテーマが使う形式に合わせておけば何かと分かりやすいので、サイト生成時に-f ymlをオプション設定しました。理由はたったこれだけです。\n ローカルでプレビュー表示 ここまでで、テーマの適用が出来たサイトが生成されています。でも実際に見てみないと上手くいっているかわかりませんよね？Hugoにはサーバー機能があります。\nコマンドプロンプトでcd C:/Hugo/Sites/MySiteでカレントディレクトリを「MySite」に変更しhugo serverを実行してみましょう。\n上手くいっていれば、ブラウザで http://localhost:1313/ にアクセスするとサイトを見ることが出来ます。\nまだ記事が無いので、恐らく真っ白です。笑\nこのように表示されていればテーマの適用が出来ています。\n確認出来たら一旦停止させましょう。コマンドプロンプトで Ctrl + C で停止です。\n 記事の作成 では試しに記事を１つ作成しましょう。コマンドプロンプトでhugo new ファイル名を実行します。この時ディレクトリも同時に指定出来ます。では、hugo new posts/test.mdを実行してみましょう。\nMySite | -archetypes | -content | | -posts | | | -test.md | | | -data | -layouts | -static | -themes | | -hugo-PaperMod | -config.yml このようにcontent以下に新しくファイルが生成されます。ディレクトリが無かった場合は自動的に作ってくれます。test.mdの中身を見てみましょう。\n1 2 3 4 5 6 7  --- title: \u0026#34;Test\u0026#34; date: 2021-11-06T12:28:59+09:00 draft: true ---   この---で囲まれている部分は「フロントマター」といいます。ここに記事ごとの設定を記述出来ます。設定項目はFront Matterに詳細があります。\nでは7行目から記事の本文を書いていきましょう。以下のように記述します。\n7 8 9 10 11 12  --- ## はじめに 前回でHugoを使う準備は整いました。 今回は、実際にサイトを作ってみましょう。 ---   このページの実際の書き出しです。書けたら変更を保存し、サーバーを起動しましょう。\nhugo serverです。覚えていましたか？\nどうでしょうか？白紙のトップページのままですね。なぜかというと、フロントマターのdraftがtrueになっている（つまり、下書きに設定されている）からです。\nコンテンツを表示するには、「draftをfalseにする」または「hugo server -Dでサーバーを起動する」のどちらかが必要です。-Dというのはオプション設定で、意味は「下書きのコンテンツもビルドする」です。hugo server\nコンテンツ製作中はhugo server -Dでサイトを確認し、完成したらdraftをfalseにするのが良いと思います。ではhugo server -Dを実行してみましょう。\nテーマのカスタマイズはしていないので、本サイトと細かいデザインの違いはありますが、ちゃんと記事が出来ています！\n 静的ファイルを出力する せっかく記事を作ったのにローカル環境でhugo server実行中しか見られないのは寂しいですよね。サーバーを起動してサイトやページに問題がなければ、hugoコマンドを実行しましょう。\nhugoを実行すると、MySiteにpublicディレクトリが生成され、その下にHTMLなどの静的ファイルが出力されます。\nただし、draftがtrueのコンテンツはビルドされません。なので記事が完成したらdraftをfalseにしてhugoを実行するという流れが良いでしょう。\npublicフォルダをまるごとサーバーにアップすればサイトを公開できます。\nこのサイトはGitHub Pagesで公開していますが、ホスティングの方法は色々あるようです。Hosting \u0026amp; Deployment\nGitHub Pagesでの公開は次回説明します。\n Hugoによるサイト作りシリーズ\n","permalink":"https://ktwl215.github.io/posts/hugo_tutorial/2/","summary":"HugoとGitHub Pagesを使ってサイトを構築する手順　「サイトの作成・テーマの適用・記事の作成」","title":"Hugoで自分のサイトを作る・part2"},{"content":" Hugoとは オープンソースの静的サイトジェネレーターです。　Hugoホームページ\n動的サイト？静的サイト？などの話は置いておいて、Hugoで何が出来るのかというと、\n「MarkdownファイルからHTMLファイルを自動的に生成」出来るようになります。\nなぜわざわざHugoを使ってHTMLファイルを作るのか。Hugoが選ばれる理由はいくつかあると思いますが、\n コンテンツを全てファイルで管理できる（データベース不必要） 多くの公開テーマを利用できる 拡張性が高い 静的サイトジェネレーターの中でかなり高速らしい  この辺りが自分がHugoを選んだ理由です。\n見た目のいいサイトを作りたい！でもHTMLとかCSSを０から学ぶのは大変…\nじゃあそこはHugoに丸投げしちゃって、自分はMarkdownで記事を書くことだけに集中しよう！ あとはヨロシク！こんなことが出来ちゃうのが「Hugo」です。すごいね。\n Hugoのインストール インストールってよく分からんし…　なんとHugoのインストールはとても簡単です。\nhttps://github.com/gohugoio/hugo/releasesからバイナリファイルをダウンロードして展開するだけです。詳しく説明していきます。\n上記サイトにアクセスしたら、自分の環境に合ったものをダウンロードしましょう。 extendedというのは「Sass」や「SCSS」を使う際に選ぶ必要があるものです。 何それ？という方はextendedでは無い方を選んでおきましょう。\n自分の環境では、「hugo_(ver.)_Windows-64bit.zip」をダウンロードしました。\nただし、テーマによってはextended必須のものもあるらしい。\nダウンロード出来たら中身を適当なディレクトリに展開します。\nCドライブ直下に「Hugo」という作業用フォルダを作り、そこに展開しました。\nここまで来たらあと一息です！\n中に「bin」というフォルダがあるか確認しておきましょう。\nhugo_(ver.)_Windows-64bit |-bin | -hugo.exe | -LICENSE | -README.md  環境変数の設定 ダウンロードが済んだらPathを通しましょう。\n「コントロールパネル」を開いて、「システム」→「システムの詳細設定」から\n「環境変数」を開きます。\nまたは、「Windowsスタートメニュー」を右クリックし「ファイル名を指定して実行」 「sysdm.cpl」→「詳細設定」→「環境変数」でも開けます。（豆知識）\n「Path」を選んで「編集」します。\n「新規」からこのようにPathの設定が出来ればOK！\n先ほど確認した「bin」までのPathです。\n 動作確認 では最後に動作確認をしておきましょう。 コマンドプロンプトを開き、hugo helpを実行します。\nこのようにヘルプが表示されていれば、正常にインストール出来ています。\n Hugoによるサイト作りシリーズ\n","permalink":"https://ktwl215.github.io/posts/hugo_tutorial/1/","summary":"HugoとGitHub Pagesを使ってサイトを構築する手順　「インストールと環境構築」","title":"Hugoで自分のサイトを作る・part1"},{"content":" 見出し 見出しは６段階で文字の大きさを設定出来る。１～６個のシャープ#で記述する。\n#と見出し文字の間に半角スペースを入れるのを忘れずに！\n1 2 3 4 5 6  # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6   H1 H2 H3 H4 H5 H6  改行と段落 半角スペースを２つ記述することで改行出来る。また、空行を挟むことで段落となる。\n1 2 3 4  あいうえお(半角スペース×２) かきくけこ （空行） さしすせそ   あいうえお\nかきくけこ\nさしすせそ\n 太字 アスタリスク*２つで囲むことで、太字に出来る。\nアスタリスク*はアンダースコア_でも可。\n1  文字を **太く** します。   文字を 太く します。\n 斜体 アスタリスク*1つで囲むことで、太字に出来る。\nアスタリスク*はアンダースコア_でも可。\n1  文字を _斜め_ にします。   文字を naname にします。\n インラインコード バッククォート`で囲むことで、インライン表示が出来る。\n1  インストールコマンドは `install @@@` です。   インストールコマンドはinstall @@@です。\n 打ち消し線 チルダ~２つで囲むことで、打ち消し線を表示できる。\n1  今日は ~~晴れです。~~ 雨でした。   今日は 晴れです。 雨でした。\n エスケープ ここまで、#、*、`などのマークダウン記号を用いてきた。\nこれらの記号を単純に文字として表示したいときはバックスラッシュ\\を記述する。\n1  インストールコマンドは \\`install @@@` です。   インストールコマンドは `install @@@` です。\n リスト アスタリスク*、またはハイフン-でリスト表示が出来る。\n1 2 3 4 5 6  - お茶 - 紅茶 - アールグレイ - ダージリン - 緑茶 - ジュース    お茶  紅茶  アールグレイ ダージリン   緑茶   ジュース   リンク [表示文字](URL)　でリンクを張ることが出来る。\n1  トップページは[ここ](https://ktwl215.github.io/)です。   トップページはここです。\nMarkdownの中に長いリンクを記述するなんてスタイリッシュじゃない！\n同じリンクの参照を何度も書くのは面倒だ！て場合は、リンク先への参照を定義出来る。\n1 2 3  [top]: https://ktwl215.github.io/ トップページは[ここ][top]です。[これ][top]もトップページです。 [このリンク][top]ももちろんトップページです。   トップページはここです。これもトップページです。\nこのリンクももちろんトップページです。\n 引用・注釈 \u0026gt;を記述することで、引用を表現出来る。また、注釈をつけることも出来る。\n[^1]:で注釈を記述している。注釈内容はどこに記述しても文末に表示される。\n1 2 3  \u0026gt; PaperMod[^1] is a simple but fast and responsive theme with useful feature-set that enhances UX. [^1]: PaperModとはHugoのテーマの１つで、このサイトで使用しているものです。 PaperModの[デモサイト](https://adityatelange.github.io/hugo-PaperMod/)    PaperMod1 is a simple but fast and responsive theme with useful feature-set that enhances UX.\n  コード バッククォート`３つで囲むことで、コードブロックを挿入できる。\nまた、言語名を続けて記述することで、シンタックスハイライトも可能（環境による）。\n1 2 3 4 5 6 7  ``` py import cv2 as cv img = cv.imread(\u0026#34;filename.png\u0026#34;) gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY) # RGB2~ ではなくBGR2~ に注意 cv.imwrite(\u0026#34;output.png\u0026#34;, img) ```   1 2 3 4 5  import cv2 as cv img = cv.imread(\u0026#34;filename.png\u0026#34;) gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY) # RGB ではなくBGR に注意(OpenCVの仕様) cv.imwrite(\u0026#34;output.png\u0026#34;, img)    テーブル バーティカルバー|を用いて記述する。これは見た方が早い。\n1 2 3  | A | B | C | |---|---|---| |111|222|333|      A B C     111 222 333     画像 ![代替テキスト](URL\u0026quot;タイトル\u0026quot;)　と記述することで、画像を挿入できる。\n代替テキストとは、画像の説明のことで、HTMLに変換した際にalt部分に格納される。\n代替テキストとタイトルは無くてもHTMLへの変換自体に問題はない。\n1  ![](画像へのパス\u0026#34;depth map\u0026#34;)   Google AI Blog 「Moving Camera, Moving People: A Deep Learning Approach to Depth Prediction」より引用\n  PaperModとはHugoのテーマの１つで、このサイトで使用しているものです。 PaperModのデモサイト\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://ktwl215.github.io/posts/how_to_markdown/","summary":"基本的なMarkdownの文法と、実際にどのように表示されるのかをまとめた","title":"Markdownの書き方"}]